function err = impErr(filename, des, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   ERR = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   ERR = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows
%   STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   err = importfile('test.err', 2, 2);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2018/06/23 23:54:21

%% Initialize variables.
delimiter = '\t';
if nargin<=3
    startRow = 2;
    endRow = inf;
end

%% Format for each line of text:
%   column1: datetimes (%{yyyy/MM/dd HH:mm:ss}D)
%	column2: text (%s)
%   column3: categorical (%C)
%	column4: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%{yyyy/MM/dd HH:mm:ss}D%s%C%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
textscan(fileID, '%[^\n\r]', startRow(1)-1, 'WhiteSpace', '', 'ReturnOnError', false);
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    textscan(fileID, '%[^\n\r]', startRow(block)-1, 'WhiteSpace', '', 'ReturnOnError', false);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.
%% Create output variable
recNum = uint8(zeros(1, length(dataArray{1,2})));
for receiver = 1:length(des)
    recNum(dataArray{1,2} == des(receiver)) = receiver;
end
dataArray{1,2} = recNum.';
dataArray{1,4} = uint8(arrayfun(@(str) bin2dec(str),dataArray{1,4}));
err = table(dataArray{1:end-1}, 'VariableNames', {'timeUTC','device','type','code'});
% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% err.timeUTC=datenum(err.timeUTC);

